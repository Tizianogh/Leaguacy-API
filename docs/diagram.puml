@startuml
!include ../style/commons.style
package leaguacyapi {

    package api {
        class SquadRessource <<Controller>> {
            + this(): SquadRessource

            + newSquad(squad: Squad): ResponseEntity<Response>
            + getSquadByUuidSquad(uuidSquad: UUID): ResponseEntity<Response>
            + getSquads(): ResponseEntity<Response>
        }
    }

    package domain {

        package model {

            class Response <<Builder>> #TECHNOLOGY {
                # timeStamp: LocalDateTime
                # statusCode: int
                # status: HttpStatus
                # reason: String
                # message: String
                # developerMessage: String
                # data: Map<?, ?>
            }

            class Squad <<Model>> #TECHNOLOGY {
                - uuidSquad: UUID
                - squadName: String

                + this(): Squad
                + getUuidSquad(): UUID
                + setUuidSquad(uuidSquad: UUID): void
                + getSquadName(): String
                + setSquadName(squadName: String): void
            }

            class League <<Model>> #TECHNOLOGY {
              - uuidLeague: UUID
              - title: String
              - created: LocalDateTime
              - updated: LocalDateTime
              - squads: Collection<Squad>

              + this(): League
              + getUuidLeague(): UUID
              + setUuidLeague(uuidLeague: String): void
              + getLeagueTitle(): string
              + setLeagueTitle(title: string): void
            }
        }

        package repository {
            interface SquadRepository <<JPA, DAO>> #TECHNOLOGY {
                findSquadByUuidSquad(uuidSquad: UUID): Squad
                findSquadBySquadName(squadName: String): Squad
                findAll(): List<Squad>
            }

            interface LeagueRepository <<JPA, DAO>> #TECHNOLOGY {
              findByTitle(leagueTitle: string): League
              findLeagueByUuidLeague(uuid: UUID): League
              findAll(): List<League>
            }

            interface UserRepository <<JPA, DAO>> #TECHNOLOGY {
               findPlayerByUsername(username: string): Player;
               findPlayerByUuidPlayer(uuidPlayer: UUID ): Player;
               findPlayerByUsernameAndPassword(username: string, password: string ): Player
            }

            interface RoleRepository <<JPA, DAO>> #TECHNOLOGY {
               findRoleByRoleName(roleName: String): Role
            }
        }

        package service {

            package interfaces {

                interface SquadService {
                    getSquadByUUID(uuidSquad: UUID): Optional<Squad>
                    createSquad(squad: Squad): Optional<Squad>
                    getSquadBySquadName(squadName: String): Optional<Squad>
                    getSquads(): List<Squad>
                    addPlayerToSquad()uuidSquad: UUID, player: Player: Optional<Squad>
                }

                interface LeagueService {
                    createLeague(league: League): Optional<League>
                    getLeagues(): List<League>
                    findLeagueByTitle(leagueTitle: string): Optional<League>
                    getLeaguesByUUID(uuid: UUID): Optional<League>
                    addSquadToLeague(uuidLeague: UUID, squad: Squad): Optional<Squad>
                }

                interface PlayerService {
                    createPlayer(player: Player): Optional<Player>
                    addRoleToPlayer(userName: String, roleName: String): Optional<Map<Player, Role>>
                    getPlayers(): List<Player>
                    getPlayerByUUID(uuidUser: UUID): Optional<Player>
                    getPlayerByName(userName: String): Optional<Player>
                    getPlayerByUsernameAndPassword(player: Player): Optional<Player>
                }

                interface RoleService {
                   createRole(role: Role): Optional<Role>
                   getRoleByRoleName(roleName: string): Optional<Role>;
                }
            }
            package implementation {
                class SquadServiceImpl <<Service>> implements SquadService {
                    + this(): SquadImpl
                    + getSquadByUUID(uuidSquad: UUID): Optional<Squad>
                    + createSquad(squad: Squad): Optional<Squad>
                    + getSquadBySquadName(squadName: String): Optional<Squad>
                    + getSquads(): List<Squad>
                }

                class LeagueServiceImp <<Service>> implements LeagueServiceImp {
                    + this(): LeagueServiceImp
                }
            }
        }
    }
}

SquadServiceImpl "-squadRepository" <--* SquadRepository
SquadRessource  "-squadService" <--*   SquadService

SquadServiceImpl ..> Squad
SquadRessource ..> Response

JpaRepository <|--- SquadRepository

@enduml
